#pragma kernel CSMain

#include "../../Common.hlsl"

RWTexture2D<float3> _Result;
Texture2D<float3> _Input;
Texture2D<float> _Depth;

float _ApertureSize, _FocalDistance, _FocalLength, _SampleRadius, _MaxCoC, _SensorHeight;
uint _SampleCount;

float CalculateCoC(float depth)
{
	return abs(1.0 - _FocalDistance / depth) * _MaxCoC * _SampleRadius;
}

[numthreads(8, 8, 1)]
void CSMain(uint2 id : SV_DispatchThreadID)
{
	//_FocalDistance = LinearEyeDepth(_Depth[_ScreenParams.xy / 2]);

	float GoldenAngle = Pi * (3.0 - sqrt(5.0));
	float2 resolution = floor(_ScreenParams.xy * _Scale);
	float2 uv = (id + 0.5) / resolution;
	
	float centerDepth = LinearEyeDepth(_Depth.SampleLevel(_PointClampSampler, uv, 0.0));
	float centerSize = CalculateCoC(centerDepth);
	
	float3 color = _Input.SampleLevel(_PointClampSampler, uv, 0.0);
	float weightSum = 1.0;
	
	float radius = _SampleRadius;
	
	for (float ang = 0.0; radius < _SampleCount; ang += GoldenAngle)
	{
		float2 tc = uv + float2(cos(ang), sin(ang)) / resolution * radius;
		
		float3 sampleColor = _Input.SampleLevel(_PointClampSampler, tc, 0.0);
		float sampleDepth = LinearEyeDepth(_Depth.SampleLevel(_PointClampSampler, tc, 0.0));
		
		float sampleSize = CalculateCoC(sampleDepth);
		if(sampleDepth > centerDepth)
			sampleSize = clamp(sampleSize, 0.0, centerSize * 2.0);
			
		color += sampleSize > radius ? sampleColor : color / weightSum;
		weightSum++;
		
		radius += _SampleRadius / radius;
	}

	_Result[id] = color * rcp(weightSum);
}
