#include "../../Common.hlsl"

#pragma kernel LuminanceBuildHistogram
#pragma kernel LuminanceHistogramAverage

#define NUM_HISTOGRAM_BINS 256

Texture2D<float3> Input;
Texture2D<float> ExposureTexture;
RWStructuredBuffer<uint> LuminanceHistogram;
RWStructuredBuffer<float> LuminanceOutput;

cbuffer Properties
{
	float MinEv, MaxEv;
	float AdaptationSpeed;
	float ExposureCompensation;
	float Aperture, Iso, ShutterSpeed;
	float DeltaTime;
};

groupshared uint HistogramShared[NUM_HISTOGRAM_BINS];

[numthreads(16, 16, 1)]
void LuminanceBuildHistogram(uint groupIndex : SV_GroupIndex, uint2 threadId : SV_DispatchThreadID)
{
    HistogramShared[groupIndex] = 0;
    
    GroupMemoryBarrierWithGroupSync();
    
	if (all(threadId < _ScaledResolution.xy))
	{
		float3 color = Input[threadId];
		float luminance = Luminance(color) / _Exposure;
		
		float minLuminance = EV100ToLuminance(MinEv);
		float maxLuminance = EV100ToLuminance(MaxEv);
		luminance = clamp(luminance, minLuminance, maxLuminance);
		
		uint binIndex = Remap(LuminanceToEV100(luminance), MinEv, MaxEv, 0.0, 255.0);
		InterlockedAdd(HistogramShared[binIndex], 1);
	}
    
    GroupMemoryBarrierWithGroupSync();
    
	InterlockedAdd(LuminanceHistogram[groupIndex], HistogramShared[groupIndex]);
}

[numthreads(256, 1, 1)]
void LuminanceHistogramAverage(uint groupIndex : SV_GroupIndex)
{
	uint countForThisBin = LuminanceHistogram[groupIndex];
	HistogramShared[groupIndex] = countForThisBin * groupIndex;
    
	GroupMemoryBarrierWithGroupSync();
    
	// Reset the count stored in the buffer in anticipation of the next pass
	LuminanceHistogram[groupIndex] = 0;
	
    [unroll]
	for (uint histogramSampleIndex = (NUM_HISTOGRAM_BINS >> 1); histogramSampleIndex > 0; histogramSampleIndex >>= 1)
	{
		if (groupIndex < histogramSampleIndex)
		{
			HistogramShared[groupIndex] += HistogramShared[groupIndex + histogramSampleIndex];
		}

		GroupMemoryBarrierWithGroupSync();
	}
    
	if (groupIndex == 0)
	{
		float pixelCount = _ScaledResolution.x * _ScaledResolution.y;
	
		float weightedLogAverage = HistogramShared[0] / pixelCount;
		float averageEv = Remap(HistogramShared[0] / pixelCount, 0.0, 255.0, MinEv, MaxEv);

		float2 uv = Remap(averageEv, MinEv, MaxEv);
		averageEv -= ExposureTexture.SampleLevel(_LinearClampSampler, float2(uv.x, 0.5), 0.0);
		
		float evLastFrame = ExposureToEV100(_Exposure);
		float adaptedEv = lerp(averageEv, evLastFrame, exp(-DeltaTime * AdaptationSpeed));
		
		if (IsInfOrNaN(evLastFrame))
			adaptedEv = averageEv;

		adaptedEv = ComputeEV100(Aperture, ShutterSpeed, Iso);
		
		LuminanceOutput[0] = EV100ToExposure(adaptedEv);
	}
}