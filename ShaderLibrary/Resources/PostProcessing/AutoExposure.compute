#include "../../Common.hlsl"

#pragma kernel LuminanceBuildHistogram
#pragma kernel LuminanceHistogramAverage

#define NUM_HISTOGRAM_BINS 256
#define HISTOGRAM_THREADS_PER_DIMENSION 16
#define HISTOGRAM_AVERAGE_THREADS_PER_DIMENSION 16

Texture2D Input;
RWBuffer<uint> LuminanceHistogram;
RWBuffer<float> LuminanceOutput;

float minLogLuminance;
float logLuminanceRange;
float tau;

float4 unity_DeltaTime;

groupshared uint HistogramShared[NUM_HISTOGRAM_BINS];

float GetLuminance(float3 color)
{
	return dot(color, float3(0.2127f, 0.7152f, 0.0722f));
}

uint HDRToHistogramBin(float3 hdrColor)
{
	float luminance = GetLuminance(hdrColor);
	if (!luminance)
		return 0;
        
	float logLuminance = saturate((log2(luminance) - minLogLuminance) / logLuminanceRange);
	return uint(logLuminance * 254.0 + 1.0);
}

[numthreads(HISTOGRAM_THREADS_PER_DIMENSION, HISTOGRAM_THREADS_PER_DIMENSION, 1)]
void LuminanceBuildHistogram(uint groupIndex : SV_GroupIndex, uint2 threadId : SV_DispatchThreadID)
{
    HistogramShared[groupIndex] = 0;
    
    GroupMemoryBarrierWithGroupSync();
    
	if (all(threadId < floor(_ScreenParams.xy * _Scale)))
	{
		float3 hdrColor = Input.Load(int3(threadId.xy, 0)).rgb;
		uint binIndex = HDRToHistogramBin(hdrColor);
		InterlockedAdd(HistogramShared[binIndex], 1);
	}
    
    GroupMemoryBarrierWithGroupSync();
    
    LuminanceHistogram.InterlockedAdd(groupIndex, HistogramShared[groupIndex]);
}

[numthreads(HISTOGRAM_AVERAGE_THREADS_PER_DIMENSION, HISTOGRAM_AVERAGE_THREADS_PER_DIMENSION, 1)]
void LuminanceHistogramAverage(uint groupIndex : SV_GroupIndex)
{
	uint countForThisBin = LuminanceHistogram[groupIndex];
	HistogramShared[groupIndex] = countForThisBin * groupIndex;
    
	GroupMemoryBarrierWithGroupSync();
    
	// Reset the count stored in the buffer in anticipation of the next pass
	LuminanceHistogram[groupIndex] = 0;
	
    [unroll]
	for (uint histogramSampleIndex = (NUM_HISTOGRAM_BINS >> 1); histogramSampleIndex > 0; histogramSampleIndex >>= 1)
	{
		if (groupIndex < histogramSampleIndex)
		{
			HistogramShared[groupIndex] += HistogramShared[groupIndex + histogramSampleIndex];
		}

		GroupMemoryBarrierWithGroupSync();
	}
    
	if (groupIndex == 0)
	{
		float pixelCount = floor(_ScreenParams.x * _Scale) * floor(_ScreenParams.y * _Scale);
	
		float weightedLogAverage = (HistogramShared[0] / max((float) pixelCount - countForThisBin, 1.0)) - 1.0;
		float weightedAverageLuminance = exp2(((weightedLogAverage / 254.0) * logLuminanceRange) + minLogLuminance);
		float luminanceLastFrame = LuminanceOutput[0];
		float adaptedLuminance = luminanceLastFrame + (weightedAverageLuminance - luminanceLastFrame) * (1 - exp(-unity_DeltaTime.x * tau));
		LuminanceOutput[0] = adaptedLuminance;
	}
}